xiaomi_package:
  sensor:
    - platform: template
      sensors:
        bbobos_main_brush_left_hours:
          value_template: "{{ ((states('sensor.bbobos_main_brush_left') | float / 3600)) | round(0) }}"
          unit_of_measurement: "hours"
        bbobos_side_brush_left_hours:
          value_template: "{{ ((states('sensor.bbobos_side_brush_left') | float / 3600)) | round(0) }}"
          unit_of_measurement: "hours"
        bbobos_filter_left_hours:
          value_template: "{{ ((states('sensor.bbobos_filter_left') | float / 3600)) | round(0) }}"
          unit_of_measurement: "hours"
        bbobos_sensor_dirty_left_hours:
          value_template: "{{ ((states('sensor.bbobos_sensor_dirty_left') | float / 3600)) | round(0) }}"
          unit_of_measurement: "hours"

  script:
    reset_main_brush_left:
      alias: "Reset hours for main brush replacement"
      sequence:
        - service: vacuum.send_command
          target:
            entity_id: vacuum.bbobos
          data:
            command: reset_consumable
            params: ["main_brush_work_time"]
    reset_side_brush_left:
      alias: "Reset hours for side brush replacement"
      sequence:
        - service: vacuum.send_command
          target:
            entity_id: vacuum.bbobos
          data:
            command: reset_consumable
            params: ["side_brush_work_time"]
    reset_filter_left:
      alias: "Reset hours for filter replacement"
      sequence:
        - service: vacuum.send_command
          target:
            entity_id: vacuum.bbobos
          data:
            command: reset_consumable
            params: ["filter_work_time"]
    reset_sensor_dirty_left:
      alias: "Reset hours for sensor cleaning time"
      sequence:
        - service: vacuum.send_command
          target:
            entity_id: vacuum.bbobos
          data:
            command: reset_consumable
            params: ["sensor_dirty_time"]

  input_boolean:
    roborock_ready_to_clean:
      name: Roborock ready to clean
      initial: true

  input_number:
    cleaning_dustbin:
      name: cleaning dustbin gauge
      min: 0
      max: 100
      step: 5
      mode: box
      unit_of_measurement: "%"

  # timer for robotock cleaning duration
  timer:
    roborock_cleaning_duration:
      duration: "05:00:00"

  automation:
    - id: "roborock_s5_max_cleaning_duration_finished"
      alias: "Roborock S5 MAX - cleaning duration finished"
      trigger:
        - platform: event
          event_type: timer.finished
          event_data:
            entity_id: timer.roborock_cleaning_duration
      action:
        - service: input_boolean.turn_on
          entity_id: input_boolean.roborock_ready_to_clean
        - condition: and
          conditions:
            - condition: time
              after: "07:00:00"
              before: "20:00:00"
            - condition: state
              entity_id: alarm_control_panel.home_monitoring
              state: "armed_away"
        - service: vacuum.start
          entity_id: vacuum.bbobos
    - id: "roborock_s5_max_reserved_time_clean_1"
      alias: "Roborock S5 MAX - reserved time clean (1)"
      trigger:
        - platform: time
          at: "07:00:00"
      condition:
        - condition: and
          conditions:
            - condition: state
              entity_id: input_boolean.roborock_ready_to_clean
              state: "on"
            - condition: state
              entity_id: alarm_control_panel.home_monitoring
              state: "armed_away"
      action:
        - service: vacuum.start
          entity_id: vacuum.bbobos
    - id: "roborock_s5_max_reserved_time_clean_2"
      alias: "Roborock S5 MAX - reserved time clean (2)"
      trigger:
        - platform: time
          at: "17:00:00"
      condition:
        - condition: and
          conditions:
            - condition: state
              entity_id: input_boolean.roborock_ready_to_clean
              state: "on"
            - condition: state
              entity_id: alarm_control_panel.home_monitoring
              state: "armed_away"
      action:
        - service: vacuum.start
          entity_id: vacuum.bbobos
    - id: "roborock_s5_max_cleaning"
      alias: "Roborock S5 MAX - Cleaning"
      trigger:
        - platform: state
          entity_id: vacuum.bbobos
          to: "cleaning"
      action:
        - service: galaxy_home_mini.speak
          data:
            message: "청소를 시작합니다."
        - service: notify.notify_telegram
          data:
            message: "🧹 청소를 시작합니다."
    - id: "roborock_s5_max_docked"
      alias: "Roborock S5 MAX - Docked"
      trigger:
        - platform: state
          entity_id: vacuum.bbobos
          from: "returning"
          to: "docked"
      action:
        - service: galaxy_home_mini.speak
          data:
            message: "청소를 마무리했습니다."
        - service: notify.notify_telegram
          data:
            message: "🪑 뽀봇이 제 자리로 돌아왔어요."
        - condition: numeric_state
          entity_id: input_number.cleaning_dustbin
          above: 70
        - service: notify.notify_telegram
          data:
            title: "🚧 유지보수 🚧"
            message: "먼지통을 비우세요."
            data:
              inline_keyboard:
                - "Reset dustbin gauge:/reset_dustbin_gauge"
    - id: "roborock_s5_max_paused"
      alias: "Roborock S5 MAX - Paused"
      trigger:
        - platform: state
          entity_id: vacuum.bbobos
          to: "paused"
      action:
        - service: notify.notify_telegram
          data:
            message: "⏸ 뽀봇이 일시정지되었습니다."
    - id: "roborock_s5_max_idle"
      alias: "Roborock S5 MAX - Idle"
      trigger:
        - platform: state
          entity_id: vacuum.bbobos
          to: "idle"
      action:
        - service: notify.notify_telegram
          data:
            message: "⏹ 뽀봇이 정지되었습니다."
    - id: "roborock_s5_max_returning_to_dock"
      alias: "Roborock S5 MAX - Returning to dock"
      trigger:
        - platform: state
          entity_id: vacuum.bbobos
          to: "returning"
      action:
        - service: notify.notify_telegram
          data:
            title: "청소가 완료되었습니다."
            message: |
              📈 보고서
                청소시간: {{ (states('sensor.bbobos_last_clean_duration') | float / 60) | round(0) }} 분 
                청소구역: {{ (states('sensor.bbobos_last_clean_area') | float) | round(0) }} m^2
        - service: input_boolean.turn_off
          entity_id: input_boolean.roborock_ready_to_clean
        - service: timer.start
          entity_id: timer.roborock_cleaning_duration
        - service: input_number.increment
          entity_id: input_number.cleaning_dustbin
        - condition: template
          value_template: |
            {% if ((states('sensor.bbobos_main_brush_left_hours') | int) < 2) 
              or ((states('sensor.bbobos_side_brush_left_hours') | int) < 2)
              or ((states('sensor.bbobos_filter_left_hours') | int) < 2)
              or ((states('sensor.bbobos_sensor_dirty_left_hours') | int) < 2)
            %}
              true
            {% else %}
              false
            {% endif %}
        - service: notify.notify_telegram
          data:
            title: "🚧 유지보수"
            message: >
              {% if (states('sensor.bbobos_main_brush_left_hours') | int) < 2 %} 메인 브러쉬{% endif %}{% if (states('sensor.bbobos_side_brush_left_hours') | int) < 2 %} 사이드 브러쉬{% endif %}{% if (states('sensor.bbobos_filter_left_hours') | int) < 2 %} 필터{% endif %}{% if (states('sensor.bbobos_sensor_dirty_left_hours') | int) < 2 %} 센서{% endif %}
            data:
              inline_keyboard:
                - "Reset main brush:/reset_main_brush_left, Reset side brush:/reset_side_brush_left"
                - "Reset filter:/reset_filter_left, Reset sensor:/reset_sensor_dirty_left"
    # telegram callbacks
    - id: "telegram_callback_to_reset_main_brush_left"
      alias: "Telegram callback to reset main brush left"
      trigger:
        - platform: event
          event_type: telegram_callback
          event_data:
            data: "/reset_main_brush_left"
      action:
        - service: script.reset_main_brush_left
        - service: notify.notify_telegram
          data:
            message: "뽀봇 메인브러쉬 리셋 완료"
    - id: "telegram_callback_to_reset_side_brush_left"
      alias: "Telegram callback to reset side brush left"
      trigger:
        - platform: event
          event_type: telegram_callback
          event_data:
            data: "/reset_side_brush_left"
      action:
        - service: script.reset_side_brush_left
        - service: notify.notify_telegram
          data:
            message: "뽀봇 사이드브러쉬 리셋 완료"
    - id: "telegram_callback_to_reset_filter_left"
      alias: "Telegram callback to reset filter left"
      trigger:
        - platform: event
          event_type: telegram_callback
          event_data:
            data: "/reset_filter_left"
      action:
        - service: script.reset_filter_left
        - service: notify.notify_telegram
          data:
            message: "뽀봇 필터 리셋 완료"
    - id: "telegram_callback_to_reset_sensor_dirty_left"
      alias: "Telegram callback to reset sensor dirty left"
      trigger:
        - platform: event
          event_type: telegram_callback
          event_data:
            data: "/reset_sensor_dirty_left"
      action:
        - service: script.reset_sensor_dirty_left
        - service: notify.notify_telegram
          data:
            message: "뽀봇 센서 리셋 완료"
    - id: "telegram_callback_to_reset_dustbin_gauge"
      alias: "Telegram callback to reset dustbin gauge"
      trigger:
        - platform: event
          event_type: telegram_callback
          event_data:
            data: "/reset_dustbin_gauge"
      action:
        - service: input_number.set_value
          target:
            entity_id: input_number.cleaning_dustbin
          data:
            value: 0
        - service: notify.notify_telegram
          data:
            message: "뽀봇 먼지통 리셋 완료"
    # telegram commands
    - id: "telegram_command_to_reset_main_brush_left"
      alias: "Telegram command to reset main brush left"
      trigger:
        - platform: event
          event_type: telegram_command
          event_data:
            command: "/reset_main_brush_left"
      action:
        - service: script.reset_main_brush_left
        - service: notify.notify_telegram
          data:
            message: "뽀봇 메인브러쉬 리셋 완료"
    - id: "telegram_command_to_reset_side_brush_left"
      alias: "Telegram command to reset side brush left"
      trigger:
        - platform: event
          event_type: telegram_command
          event_data:
            command: "/reset_side_brush_left"
      action:
        - service: script.reset_side_brush_left
        - service: notify.notify_telegram
          data:
            message: "뽀봇 사이드브러쉬 리셋 완료"
    - id: "telegram_command_to_reset_filter_left"
      alias: "Telegram command to reset filter left"
      trigger:
        - platform: event
          event_type: telegram_command
          event_data:
            command: "/reset_filter_left"
      action:
        - service: script.reset_filter_left
        - service: notify.notify_telegram
          data:
            message: "뽀봇 필터 리셋 완료"
    - id: "telegram_command_to_reset_sensor_dirty_left"
      alias: "Telegram command to reset sensor dirty left"
      trigger:
        - platform: event
          event_type: telegram_command
          event_data:
            command: "/reset_sensor_dirty_left"
      action:
        - service: script.reset_sensor_dirty_left
        - service: notify.notify_telegram
          data:
            message: "뽀봇 센서 리셋 완료"
    - id: "telegram_command_to_reset_dustbin_gauge"
      alias: "Telegram command to reset dustbin gauge"
      trigger:
        - platform: event
          event_type: telegram_command
          event_data:
            command: "/reset_dustbin_gauge"
      action:
        - service: input_number.set_value
          target:
            entity_id: input_number.cleaning_dustbin
          data:
            value: 0
        - service: notify.notify_telegram
          data:
            message: "뽀봇 먼지통 리셋 완료"
